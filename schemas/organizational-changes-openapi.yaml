openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
servers:
  - url: http://localhost:9000
    description: locally hosted server for local development purposes
paths:
  /test:
    get:
      description: "Simple test end-point returning a Hello World!"
      operationId: "test"
      responses:
        '200':
          description: OK
  /addemployee:
    get:
      description: "Simple test end-point returning a Hello World!"
      operationId: "addemployeeGet"
      responses:
        '200':
          description: OK
    post:
      description: "Simple test end-point returning a Hello World!"
      operationId: "addemployeePost"
      requestBody: 
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employees"
      responses:
        "200":
          description: OK
        "400":
          description: "Invalid status value"
  /employee-count-by-department-code:
    get:
      description: "Simple test end-point returning a Hello World!"
      operationId: "employee-count-by-department-code"
      parameters:
        - in: query
          name: department-code
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: query
          name: as-of
          schema:
            type: string
          required: true
          description: The date on which to count employees in the organization
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employee"
  /employee-department-history:
    get:
      description: get the history evolution of a department showing change is size over time and movement of people in and out
      operationId: "departmentHistory"
      parameters:
        - in: query
          name: departmentCode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: query
          name: startDate
          schema:
            type: string
          required: true
          description: The starting point for the history
        - in: query
          name: endDate
          schema:
            type: string
          required: false
          description: The ending point for the history, if not provided it is assume to be the date of the call ("today")
        - in: query
          name: dateStep
          schema:
            $ref: "#/components/schemas/dateStep"
          required: false
          description: this is the date granularity step between sample points of the history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/departmentHistory"
  /department-codes:
    get:
      description: get a list of department codes as of a given date
      operationId: "department-codes"
      parameters:
        - in: query
          name: as-of
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/sparql-results+xml:
              schema:
                type: string
            application/sparql-results+json:
              schema:
                type: string
            application/x-binary-rdf-results-table:
              schema:
                type: string
  /upload:
    post:
      description: upload a binary file
      operationId: "upload"
      requestBody:
        required: true
        content:
          application/octet-stream:
            # any media type is accepted, functionally equivalent to `*/*`
            schema:
              type: array
              items:
                type: string
      responses:
        '200':
          description: OK

components:
  schemas:
    employee:
      type: object
      properties:
        employee_id:
          type: string
        system_id:
          type: string
        firstName:
          type: string
        secondName:
          type: string
        jobTitle:
          type: string
        department:
          type: string
        departmentStartDate:
          type: string
          format: date
        departmentEndDate:
          type: string
          format: date
        employmentStartDate:
          type: string
          format: date
        employementEndDate:
          type: string
          format: date

    employees:
      type: array
      items:
        $ref: "#/components/schemas/employee"

    dateStep:
      type: string
      enum:
            - day
            - week
            - month
            - year

    departmentHistory:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        dateStep:
          $ref: "#/components/schemas/dateStep"
        history:
          type: array
          items:
            $ref: "#/components/schemas/historicPoint"

    historicPoint:
      type: object
      properties:
        department:
          type: string
          example: "ABCD1"
        date:
          type: string
          format: date
        size:
          type: integer
          example: 23
        joiners:
          type: array
          items:
            $ref: "#/components/schemas/employee"
        leavers:
          type: array
          items:
            $ref: "#/components/schemas/employee"
        members:
          type: array
          items:
            $ref: "#/components/schemas/employee"