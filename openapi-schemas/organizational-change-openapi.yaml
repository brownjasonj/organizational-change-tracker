openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: locally hosted server for local development purposes
  - url: https://localhost:8443
    description: locally hosted server for local development purposes
paths:
  /employee/{employeeid}:
    get:
      description: get the employee information.
      operationId: "employeeByEmployeeId"
      parameters:
        - in: path
          name: employeeid
          schema:
            type: string
          required: true
          description: Employee Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeDepartmentEpocs"
  /employee/{employeeid}/corporateTitles:
    get:
      description: get the history of which Corporate Title an employee has had.
      operationId: "corporateTitleHistoryByEmployeeId"
      parameters:
        - in: path
          name: employeeid
          schema:
            type: string
          required: true
          description: Employee Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeCorporateTitleEpocs"
  /employee/{employeeid}/departments:
    get:
      description: get the history of which department an employee has gone through.
      operationId: "departmentHistoryByEmployeeId"
      parameters:
        - in: path
          name: employeeid
          schema:
            type: string
          required: true
          description: Employee Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeDepartmentEpocs"
  /department/{departmentcode}/{asofdate}/employees:
    get:
      description: "Simple test end-point returning a Hello World!"
      operationId: "employeesByDepartmentCodeAsOfDate"
      parameters:
        - in: path
          name: departmentcode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: path
          name: asofdate
          schema:
            type: string
          required: true
          description: The date on which to count employees in the organization in the form YYYY-MM-DD
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employee"
        '500':
          description: Internal error, most likely caused by a failure to connect to storage.
        '400':
          description: Poorly formed request, most commonly related to the query parameters.
  /department/{departmentcode}/{asofdate}/employeeCount:
    get:
      description: get the number of employees in a department  on the given date
      operationId: "employeeCountByDepartmentCodeAsOfDate"
      parameters:
        - in: path
          name: departmentcode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: path
          name: asofdate
          schema:
            type: string
          required: true
          description: The date on which to count employees in the organization
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employee"
                # $ref: "http://127.0.0.1:8000/bank-organization/BankNumberOfEmployeesInOrg"
        '500':
          description: Internal error, most likely caused by a failure to connect to storage.
        '400':
          description: Poorly formed request, most commonly related to the query parameters.
  /department/{departmentcode}/{fromdate}/{todate}/employeeCount:
    get:
      description: get the history evolution of a department showing change is size over time and movement of people in and out
      operationId: "employeeCountByDepartmentCodeFromDateToDate"
      parameters:
        - in: path
          name: departmentcode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: path
          name: fromdate
          schema:
            type: string
          required: true
          description: The starting point for the history
        - in: path
          name: todate
          schema:
            type: string
          required: true
          description: The ending point for the history, if not provided it is assume to be the date of the call ("today")
        - in: query
          name: datestep
          schema:
            $ref: "#/components/schemas/dateStep"
          required: false
          description: this is the date granularity step between sample points of the history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/departmentHistory"
  /department/{departmentcode}/{fromdate}/{todate}/employeesJoiningLeaving:
    get:
      description: get the history evolution of a department showing change is size over time and movement of people in and out
      operationId: "employeesJoiningLeavingByDepartmentCodeFromDateToDate"
      parameters:
        - in: path
          name: departmentcode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: path
          name: fromdate
          schema:
            type: string
          required: true
          description: The starting point for the history
        - in: path
          name: todate
          schema:
            type: string
          required: true
          description: The ending point for the history, if not provided it is assume to be the date of the call ("today")
        - in: query
          name: datestep
          schema:
            $ref: "#/components/schemas/dateStep"
          required: false
          description: this is the date granularity step between sample points of the history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/departmentHistory"
  /department/{departmentcode}/{fromdate}/{todate}/employeesJoining:
    get:
      description: get list of employees that joined a department in a particular period
      operationId: "employeesJoiningByDepartmentCodeFromDateToDate"
      parameters:
        - in: path
          name: departmentcode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: path
          name: fromdate
          schema:
            type: string
          required: true
          description: The starting point for the history
        - in: path
          name: todate
          schema:
            type: string
          required: true
          description: The ending point for the history, if not provided it is assume to be the date of the call ("today")
        - in: query
          name: datestep
          schema:
            $ref: "#/components/schemas/dateStep"
          required: false
          description: this is the date granularity step between sample points of the history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/departmentHistory"
  /department/{departmentcode}/{fromdate}/{todate}/employeesLeaving:
    get:
      description: get list of employees that left a department in a particular period
      operationId: "employeesLeavingByDepartmentCodeFromDateToDate"
      parameters:
        - in: path
          name: departmentcode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: path
          name: fromdate
          schema:
            type: string
          required: true
          description: The starting point for the history
        - in: path
          name: todate
          schema:
            type: string
          required: true
          description: The ending point for the history, if not provided it is assume to be the date of the call ("today")
        - in: query
          name: datestep
          schema:
            $ref: "#/components/schemas/dateStep"
          required: false
          description: this is the date granularity step between sample points of the history
      responses:
        '200':
          description: OK
  /department/hierachy/{departmentcode}/{depth}/{asofdate}:
    get:
      description: get list of employees that left a department in a particular period
      operationId: "departmentJierarchyByDepartmentCodeWithDepthFromDateToDate"
      parameters:
        - in: path
          name: departmentcode
          schema:
            type: string
          required: true
          description: String deparment-code (e.g., AABB).  Department codes are strings encoding a hierarchy where the prefix is higher up the hierarchy (e.g., A->AA->AAA->AAAA)
        - in: path
          name: depth
          schema:
            type: integer
          required: true
          description: The depth of the hierarchy to return
        - in: path
          name: asofdate
          schema:
            type: string
          required: true
          description: The starting point for the history
      responses:
        '200':
          description: OK
  
  /departments/{asofdate}:
    get:
      description: get a list of department codes as of a given date
      operationId: "departmentCodesAsOfDate"
      parameters:
        - in: path
          name: asofdate
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/sparql-results+xml:
              schema:
                type: string
            application/sparql-results+json:
              schema:
                type: string
            application/x-binary-rdf-results-table:
              schema:
                type: string
  /operations/upload:
    post:
      description: upload a binary file
      operationId: "uploadEmployeesByFile"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # 'file' will be the field name in this multipart request
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: Request to upload file has been succesfully.   Response contains operational url to poll for upload status.
  /operations/upload/{requestid}/status:
    get:
      description: Return the status of the file upload with the given request id.
      operationId: "operationsFileUploadStatusByRequestId"
      parameters:
        - in: path
          name: requestid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addEmployeeLoadStatus"
  /operations/upload/{requestid}/cancel:
    get:
      description: Cancel upload of file with the given request id
      operationId: "operationsFileUploadCancelByRequestId"
      parameters:
        - in: path
          name: requestid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
  /operations/status/uploads:
    get:
      description: Pollable end-point to check the status of the upload
      operationId: "operationsFilesUploadStatuses"
      responses:
        '200':
          description: OK
  /operations/delete:
    get:
      description: "Operational function to delete all triples from the graph database"
      operationId: "operationsDeleteTriples"
      responses:
        '200':
          description: OK
        '500':
          description: Internal error.
  /operations/configuration:
    get:
      description: "Operational function to get the configuration being used by the application"
      operationId: "operationsGetConfiguration"
      responses:
        '200':
          description: OK
        '500':
          description: Internal error.
  /id/employee-id/{employeeid}:
    get:
      description: get the employees data by employee id
      operationId: "employeeByEmployeeId"
      parameters:
        - in: path
          name: employeeid
          schema:
            type: string
          required: true
          description: Employee Id
      responses:
        '200':
          description: OK
  /id/employee-system-id/{employeesystemid}:
    get:
      description: get the employees data by employee system id
      operationId: "employeeByEmployeeSystemId"
      parameters:
        - in: path
          name: employeesystemid
          schema:
            type: string
          required: true
          description: Employee System Id
      responses:
        '200':
          description: OK
  /id/organization-id/{organizationid}:
    get:
      description: get the organization data by organization id
      operationId: "organizationByOrganizationId"
      parameters:
        - in: path
          name: organizationid
          schema:
            type: string
          required: true
          description: Organization Id
      responses:
        '200':
          description: OK
  /id/time-id/{timeid}:
    get:
      description: get the time data by time id
      operationId: "timeByTimeId"
      parameters:
        - in: path
          name: timeid
          schema:
            type: string
          required: true
          description: Time Id
      responses:
        '200':
          description: OK
  /id/time-interval-id/{timeintervalid}:
    get:
      description: get the time interval data by time interval id
      operationId: "timeIntervalByTimeIntervalId"
      parameters:
        - in: path
          name: timeintervalid
          schema:
            type: string
          required: true
          description: Time Interval Id
      responses:
        '200':
          description: OK
  /id/membership-id/{membershipid}:
    get:
      description: get the membership data by mmbership id
      operationId: "membershipByMembershipId"
      parameters:
        - in: path
          name: membershipid
          schema:
            type: string
          required: true
          description: Membership Id
      responses:
        '200':
          description: OK

components:
  schemas:
    employee:
      type: object
      properties:
        employee_id:
          type: string
        system_id:
          type: string
        firstName:
          type: string
        secondName:
          type: string
        jobTitle:
          type: string
        department:
          type: string
        departmentStartDate:
          type: string
          example: "2019-05-17"
        departmentEndDate:
          type: string
          example: "2019-05-17"
        employmentStartDate:
          type: string
          example: "2019-05-17"
        employementEndDate:
          type: string
          example: "2019-05-17"

    employees:
      type: array
      items:
        $ref: "#/components/schemas/employee"

    employeeDepartmentEpoc:
      type: object
      properties:
        employeeId:
          type: string
        department:
          type: string
          example: "ABCD1"
        startdate:
          type: string
          example: "2019-05-17"
        enddate:
          type: string
          example: "2019-05-17"

    employeeDepartmentEpocs:
      type: object
      properties:
        employeeId:
          type: string
        epoc:
          type: array
          items:
            $ref: "#/components/schemas/employeeDepartmentEpoc"

    employeesDepartmentEpocs:
      type: array
      items:
        $ref: "#/components/schemas/employeeDepartmentEpocs"
    
    employeeCorporateTitleEpoc:
      type: object
      properties:
        role:
          type: string
          example: "Vice President"
        startdate:
          type: string
          example: "2019-05-17"
        enddate:
          type: string
          example: "2019-05-17"

    employeeCorporateTitleEpocs:
      type: array
      items:
        $ref: "#/components/schemas/employeeCorporateTitleEpoc"

    dateStep:
      type: string
      enum:
            - day
            - week
            - month
            - year

    departmentHistory:
      type: object
      properties:
        startDate:
          type: string
          example: "2019-05-17"
        endDate:
          type: string
          example: "2019-05-17"
        dateStep:
          $ref: "#/components/schemas/dateStep"
        history:
          type: array
          items:
            $ref: "#/components/schemas/historicPoint"

    historicPoint:
      type: object
      properties:
        department:
          type: string
          example: "ABCD1"
        date:
          type: string
          example: "2019-05-17"
        size:
          type: integer
          example: 23
        joiners:
          type: array
          items:
            $ref: "#/components/schemas/employee"
        leavers:
          type: array
          items:
            $ref: "#/components/schemas/employee"
        members:
          type: array
          items:
            $ref: "#/components/schemas/employee"

    addEmployeeLoadStatus:
      type: object
      properties:
        resourceLocation:
          type: string
        requestId:
          type: string
        createdDateTime:
          type: string
        completedDateTime:
          type: string
        entriesProgressed:
          type: integer
        status:
          type: string
          enum: [processing, complete, error]
        error:
          type: string